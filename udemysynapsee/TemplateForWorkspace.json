{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "udemysynapsee"
		},
		"golddatalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'golddatalake'"
		},
		"synapseworkspace0323-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapseworkspace0323-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapseworkspace0323.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"udemysynapsee-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'udemysynapsee-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:udemysynapsee.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"golddatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakesynapsee.dfs.core.windows.net/"
		},
		"linkedService1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "synapseworkspace0323-ondemand.sql.azuresynapse.net"
		},
		"linkedService1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "gold_database"
		},
		"synapseworkspace0323-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsebaselake0323.dfs.core.windows.net"
		},
		"udemysynapsee-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsedl1.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Loading All tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get TableNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get TableNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get TableNames').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[CreateSQLServerlessView_gold]",
										"storedProcedureParameters": {
											"viewName": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "linkedService1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-24T18:23:21Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Binary1')]",
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "golddatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "SalesLT",
						"fileSystem": "gold"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/golddatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/golddatalake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('golddatalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('golddatalake_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('linkedService1_properties_typeProperties_server')]",
					"database": "[parameters('linkedService1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseworkspace0323-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapseworkspace0323-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseworkspace0323-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapseworkspace0323-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/udemysynapsee-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('udemysynapsee-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/udemysynapsee-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('udemysynapsee-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Schema for youtubegold')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "project_1"
				},
				"content": {
					"query": "create SCHEMA gold;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "youtube_project_1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/External Tables for Youtube')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "project_1"
				},
				"content": {
					"query": "create MASTER KEY ENCRYPTION BY PASSWORD ='Azure@143';\n\ncreate DATABASE SCOPED CREDENTIAL youtube_project\nWITH\n    IDENTITY ='Managed identity'\n\ncreate EXTERNAL DATA SOURCE source_silver\nWITH\n(\n    LOCATION= 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver',\n    CREDENTIAL = youtube_project\n)\n\ncreate EXTERNAL DATA SOURCE source_gold\nWITH\n(\n    LOCATION= 'https://datalakesynapsee.dfs.core.windows.net/youtubegold',\n    CREDENTIAL = youtube_project\n)\n\n\ncreate EXTERNAL FILE FORMAT format_parquet\nWITH\n(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n\n\n------------------------\n--Create External tables Extsales--------------------\n\ndrop EXTERNAL TABLE gold.extsales;\nCREATE EXTERNAL TABLE gold.extsales\nWITH\n(\n    LOCATION='extsales',\n    DATA_SOURCE=source_gold,\n    FILE_FORMAT=format_parquet\n)\nAS\nSELECT * from gold.Sales\n\n------------------------\n\ncreate EXTERNAL table gold.productstb\nWITH\n(\n    LOCATION = 'Products',\n    DATA_SOURCE=source_gold,\n    FILE_FORMAT=format_parquet\n)\nAS\nSELECT * from gold.Products",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "youtube_project_1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "newyork_project"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "newyork_project"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsedl1.dfs.core.windows.net/newyorkproject/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\n-----------------\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://newyorkproject@synapsedl1.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------Examine the data types of the columns \nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsedl1.dfs.core.windows.net/newyorkproject/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0''\n    ) AS [result]'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL DATA SOURCE myadls\nWITH (\n    LOCATION = 'abfss://demo@synapsedl1.dfs.core.windows.net/'\n);\n\n\n\nSELECT \n    JSON_VALUE(value, '$.vendorID') AS vendorID,\n    JSON_VALUE(value, '$.tpepPickupDateTime') AS pickupTime,\n    JSON_VALUE(value, '$.tpepDropoffDateTime') AS dropoffTime,\n    JSON_VALUE(value, '$.passengerCount') AS passengerCount,\n    JSON_VALUE(value, '$.tripDistance') AS tripDistance,\n    JSON_VALUE(value, '$.puLocationId') AS pickupLoc,\n    JSON_VALUE(value, '$.doLocationId') AS dropLoc,\n    JSON_VALUE(value, '$.startLon') AS startLon,\n    JSON_VALUE(value, '$.endLat') AS endLat\nFROM OPENROWSET(\n    BULK '*.json',\n    DATA_SOURCE = 'myadls',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',  -- dummy separator\n    FIELDQUOTE = '0x0b'        -- dummy quote to treat entire line as a single column\n) WITH (\n    value NVARCHAR(MAX)\n) AS jsonData\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create view for youtubegold')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "project_1"
				},
				"content": {
					"query": "-------- Create viw for Calendar ---------\n\ncreate view gold.calendar\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Calendar/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for AdventureWorks_Customers ---------\n\ncreate view gold.Customers\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Customers/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for Product_Categories ---------\n\ncreate view gold.Product_Categories\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Product_Categories/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for Products ---------\n\ncreate view gold.Products\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Products/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for Returns ---------\n\ncreate view gold.Returns\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Returns/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for Sales ---------\n\ncreate view gold.Sales\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Sales/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for Territories ---------\n\ncreate view gold.Territories\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/AdventureWorks_Territories/',\n        FORMAT='PARQUET'\n    )as quer1\n\n-------- Create viw for Product_Subcategories ---------\n\ncreate view gold.Product_Subcategories\nAS\nselect * \nfrom \n    OPENROWSET(\n        BULK 'https://datalakesynapsee.dfs.core.windows.net/youtubesilver/Product_Subcategories/',\n        FORMAT='PARQUET'\n    )as quer1",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "youtube_project_1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}